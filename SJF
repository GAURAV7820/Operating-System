#include <stdio.h>

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int completion_time;
    int waiting_time;
    int turnaround_time;
    int done;
} Process;

void sortByArrivalTime(Process p[], int n) {
    int i, j;
    Process temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (p[j].arrival_time > p[j + 1].arrival_time) {
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n, i, completed = 0, current_time = 0, shortest;
    float total_waiting = 0, total_turnaround = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    int gantt_p[n];
    int gantt_start[n];

    for (i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time for process %d: ", p[i].pid);
        scanf("%d", &p[i].arrival_time);
        printf("Enter burst time for process %d: ", p[i].pid);
        scanf("%d", &p[i].burst_time);
        p[i].done = 0;
    }

    sortByArrivalTime(p, n);

    int index = 0;
    while (completed != n) {
        shortest = -1;
        int min_burst = 1e9;
        for (i = 0; i < n; i++) {
            if (!p[i].done && p[i].arrival_time <= current_time && p[i].burst_time < min_burst) {
                min_burst = p[i].burst_time;
                shortest = i;
            }
        }
        if (shortest == -1) {
            current_time++;
        } else {
            gantt_p[index] = p[shortest].pid;
            gantt_start[index] = current_time;
            index++;

            current_time += p[shortest].burst_time;
            p[shortest].completion_time = current_time;
            p[shortest].turnaround_time = p[shortest].completion_time - p[shortest].arrival_time;
            p[shortest].waiting_time = p[shortest].turnaround_time - p[shortest].burst_time;
            total_waiting += p[shortest].waiting_time;
            total_turnaround += p[shortest].turnaround_time;
            p[shortest].done = 1;
            completed++;
        }
    }
    printf("\nPID\tArrival\tBurst\tCompletion\tWaiting\tTurnaround\n");
    for (i = 0; i < n; i++) {
        printf("%-4d\t%-7d\t%-5d\t%-10d\t%-7d\t%-10d\n",
               p[i].pid, p[i].arrival_time, p[i].burst_time,
               p[i].completion_time, p[i].waiting_time, p[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f\n", total_waiting / n);
    printf("Average Turnaround Time: %.2f\n\n", total_turnaround / n);

    printf("Gantt Chart:\n");

    printf(" ");
    for (i = 0; i < index; i++) {
        printf("-------");
    }
    printf("\n|");

    for (i = 0; i < index; i++) {
        printf("  P%-3d|", gantt_p[i]);
    }
    printf("\n ");

    for (i = 0; i < index; i++) {
        printf("-------");
    }
    printf("\n");

    for (i = 0; i < index; i++) {
        printf("%-7d", gantt_start[i]);
    }
    printf("%-7d\n", current_time);

    return 0;
}
